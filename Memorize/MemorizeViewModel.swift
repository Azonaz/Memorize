import SwiftUI

class MemorizeViewModel: ObservableObject {
    private static let emojis = ["üê±", "üê•", "üêô", "üêº", "ü¶©", "üêë", "üê≠", "üê≥", "üêç", "ü¶ã"]
    let emojisAnimal = ["üê±", "üê•", "üêô", "üêº", "ü¶©", "üêë", "üê≠", "üê≥", "üêç", "ü¶ã"]
    let emojisFood = ["ü•ê", "üßÅ", "‚òïÔ∏è", "üçï", "üç¶", "üçú", "üçî", "üçó", "üçß", "üç≥", "ü•ó"]
    let emojisTransport = ["üöÅ", "üöò", "‚úàÔ∏è", "‚õµÔ∏è", "üöÇ", "üöú", "üõµ", "üöö", "üö≤", "üõ•Ô∏è"]
    
    private static func createMemoryGame() -> MemorizeModel<String> {
        return MemorizeModel(numberOfPairsOfCards: 6) { pairIndex in
            if emojis.indices.contains(pairIndex) {
                return emojis[pairIndex]
            } else {
                return "‚ÅâÔ∏è"
            }
        }
    }
    
    @Published private var model = createMemoryGame()
    
    var cards: Array<MemorizeModel<String>.Card> {
        return model.cards
    }
    
    func shuffle() {
        model.shuffle()
    }
    
    func choose(_ card: MemorizeModel<String>.Card) {
        model.choose(card)
    }
    
    func widthThatBestFits() -> CGFloat {
        let cardCount = MemorizeViewModel.emojis.count
        
        if cardCount == 8 {
            return 90
        } else if cardCount < 16 {
            return 80
        } else {
            return 65
        }
    }
}
